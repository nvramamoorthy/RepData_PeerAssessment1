columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
mean[i] <- mean(y[, i])
}
means
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
mean[i] <- mean(y[, i])
}
means
}
coloummean(air)
colummean(air)
columnmean(air)
air <- hw1_data.csv
air <- read.csv("/Users/siddharth/Desktop/Data-Scientist/hw1_data.csv")
air
columnmean
columnmean(y)
columnmean(air)
column
columnmean
air
columnmean(air)
colummean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
s
columnmean(air)
colummean
air
colummean(air)
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(air)
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(air)
colummean
colummean(air)
columnmean(air, FALSE)
colummean(air)
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
air
columnmean(air)
colummean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(air)
f <- function(a, b) {
a^3
}
f(6)
f <- function(a, b) {
3*a + b*100
}
f(2,3)
f(9,70)
ls
x <- as.date("1970-01-01")
x <- as.Date("1970-01-01")
x
unclass(x)
Sys.time()
Sys.time()
Sys.time()
Sys.time()
p <- as.POSIXlt(Sys.time())
p
names(unclass(p))
names(unclass(x))
dir
source("rankhospital.R")
install.packages("swirl")
install.packages("swirl")
install.packages("knite", dependancies=TRUE)
install.packages("knite", dependencies=TRUE)
install.packages("knitr", dependencies=TRUE)
swirl()
install.packages(swirl)
library(swirl)
rm(list=ls())
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution,pm25)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm,color=blue)
boxplot(ppm,color="blue")
boxplot(ppm,col="blue")
abline(ppm,h=12)
int_abline(ppm,h=12)
abline(ppm)
abline(ppm,h==12)
abline(ppm,h=12)
?abline
skip
skip()
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12)
abline(v=12,lwd=2)
abline(v=median(ppm),col="megenta",lwd=4)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(formula = pm25~region,pollution,col="red")
boxplot(pollution,formula = pm25~region,col="red")
skip()
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset
east<-subset(pollition,region=="east")
east<-subset(pollution,region=="east")
head(east)
hist(east,col="green")
hist(east$pm25,col="green")
hist(subset(pollution,region=="west"),col="green"
)
4PM25
hist(subset(pollution$pm25,region=="west"),col="green")
hist(subset(pollution$pm25,region=="west"),col="green")
skip()
plot(lattitude,pm25)
plot(latitude,pm25)
skip()
abline(h=12)
abline(h=12,lty=2)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm, col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west<-subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful, plot(eruptions,waiting))
with(faithful, plot(eruptions,waiting))
titke(main="Old Faithful Geyser data")
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy2pdf(png, file="geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
test(mean(cars$speed),max(cars$dist),"SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
ls()
instal.packages("kernlab")
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator=rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
head(spam)
trainSpam=spam[trainIndicotor==1,]
trainSpam=spam[trainIndicator==1,]
testSpam=spam[trainIndicator==0,]
names(trainSpam)
names(testSpam)
table(trainSpam$type)
plot(trainSpam$capitalAce~trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
swirl
swirl()
install.packages("swirl")
swirl
swirl()
ls()
library(swirl)
ls()
install_from_swirl("Regression Models")
install.packages("UsingR")
library(UsingR)
library(manupulate)
library(manipulate)
data(galton)
swirl()
plot(child~parent,glaton)
plot(child~parent,galton)
plot(jitter(child,4) ~ parent,galton)
regrline<-lm(child~parent, galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
fit<-lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild<-var(child)
varChild<-var(child, galton)
skip
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,(varRes+varEst))
all.equal(varChild,varEst+varRes)
efit<-lm(accel~mag+dist.)
efit<-lm(accel~mag+dist,attenu)
mean(residuals)
mean(efit$residuals)
cov(attenu$mad)
cov(attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
x<-c(0,18,-1.54,0.42,0.95)
y<-c(2,1,3,1)
weighted.mean(x,y)
x<-c(0.18,-1.54,0.42,0.95)
weighted.mean(x,y)
sum(x*y)/7
install_fram_swirl(statistical Inference)
install_from_swirl(statistical Inference)
install_from_swirl("statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
1/52
52
4/52
0
12/52
11/51
10/50
2/11
2/50
2/51
getwd
getwd()
setwd("~/Desktop/Reproducible Research/Peer-Assignment-1")
ls
ls()
setwd("~/Desktop/Reproducible Research/Peer-Assignment-1/RepData_PeerAssessment1")
setwd("~/Desktop/Reproducible Research/Peer-Assignment-1")
activity<-read.csv("activity.csv",header=TRUE)
getwd()
setwd("~/Desktop/Reproducible Research/Peer-Assignment-1/RepData_PeerAssessment1")
getwd()
activity<-read.csv("activity.csv",header=TRUE)
head
head(activity)
dim(activity)
dim(activity)
str(ativity)
head(activity)
